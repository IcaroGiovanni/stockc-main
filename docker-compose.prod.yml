version: '3.8'

services:
  # Aplicação principal
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=stock_control
      - DB_PORT=3306
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - BCRYPT_SALT_ROUNDS=12
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_SECURE=${EMAIL_SECURE}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./public/uploads:/app/public/uploads:rw
      - ./logs:/app/logs:rw
      - app_node_modules:/app/node_modules:ro
    networks:
      - stockctrl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Banco de dados MySQL
  db:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD:-password}
      - MYSQL_DATABASE=stock_control
      - MYSQL_USER=stockctrl
      - MYSQL_PASSWORD=stockctrl123
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./create_core_tables.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./fix_products_table.sql:/docker-entrypoint-initdb.d/02-fix.sql:ro
      - ./src/config/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
    networks:
      - stockctrl-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-password}"]
      timeout: 20s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./src/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - stockctrl-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Nginx como proxy reverso e load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - stockctrl-network
    restart: unless-stopped
    profiles:
      - nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Backup automático do banco
  backup:
    image: mysql:8.0
    volumes:
      - ./backup:/backup
      - mysql_data:/var/lib/mysql:ro
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD:-password}
    networks:
      - stockctrl-network
    profiles:
      - backup
    command: >
      sh -c "
        while true; do
          mysqldump -h db -u root -p${DB_PASSWORD:-password} stock_control > /backup/backup_$(date +%Y%m%d_%H%M%S).sql;
          find /backup -name 'backup_*.sql' -mtime +7 -delete;
          sleep 86400;
        done
      "
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_node_modules:
    driver: local
  nginx_logs:
    driver: local

networks:
  stockctrl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16